{"version":3,"sources":["webpack://WaveSurfer.[name]/webpack/universalModuleDefinition","webpack://WaveSurfer.[name]/webpack/bootstrap","webpack://WaveSurfer.[name]/./src/plugin/regions/index.js","webpack://WaveSurfer.[name]/./src/plugin/regions/region.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","RegionsPlugin","params","ws","wavesurfer","util","getRegionSnapToGridValue","maxRegions","regionsMinLength","getOwnPropertyNames","Observer","forEach","Region","_onBackendCreated","wrapper","drawer","regions","region","edgeScrollWidth","clientWidth","add","list","_onReady","dragSelection","enableDragSelection","keys","id","updateRender","deferInit","staticProps","addRegion","options","initialisedPluginList","initPlugin","clearRegions","clear","disableDragSelection","instance","isReady","once","un","length","wouldExceedMaxRegions","minLength","on","remove","drag","maxScroll","start","touchId","scrollDirection","wrapperRect","slop","container","scroll","scrollParent","scrollSpeed","scrollThreshold","duration","getDuration","pxMove","edgeScroll","e","scrollLeft","Math","min","max","end","handleEvent","update","window","requestAnimationFrame","eventDown","touches","targetTouches","identifier","scrollWidth","getBoundingClientRect","addEventListener","removeEventListener","eventUp","preventClick","fireEvent","document","body","eventMove","startUpdate","endUpdate","x","clientX","left","right","time","getCurrentTime","cur","snapToGridInterval","offset","snapToGridOffset","round","regionsUtils","style","regionsUtil","getId","Number","resize","undefined","Boolean","isResizing","isDragging","loop","color","handleStyle","handleLeftEl","handleRightEl","data","attributes","maxLength","_onRedraw","preventContextMenu","channelIdx","parseInt","regionHeight","marginTop","channelCount","backend","buffer","numberOfChannels","floor","getHeight","formatTimeCallback","bindInOut","render","updateHandlesResize","element","removeChild","play","regionEl","createElement","attrname","className","title","formatTime","setAttribute","position","zIndex","height","top","appendChild","css","cursor","width","backgroundColor","handleLeftCss","assign","handleRightCss","bindEvents","map","slice","join","pixelRatio","dur","getWidth","startLimited","endLimited","regionWidth","firedIn","firedOut","onProcess","realTime","preventDefault","stopPropagation","bindDragEvents","startTime","regionLeftHalfTime","regionRightHalfTime","updated","distanceBetweenCursorAndWrapperEdge","regionHalfTimeWidth","adjustment","minPxPerSec","calculatedLeft","calculatedRight","delta","onDrag","onResize","onDown","target","tagName","toLowerCase","classList","contains","onUp","onMove","maxEnd","direction","cursorStyle"],"mappings":"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","file":"wavesurfer.regions.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"regions\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"regions\"] = factory();\n\telse\n\t\troot[\"WaveSurfer\"] = root[\"WaveSurfer\"] || {}, root[\"WaveSurfer\"][\"regions\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"localhost:8080/dist/plugin/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/**\n *  @since 4.0.0 This class has been split\n *\n * @typedef {Object} RegionsPluginParams\n * @property {?boolean} dragSelection Enable creating regions by dragging with\n * the mouse\n * @property {?RegionParams[]} regions Regions that should be added upon\n * initialisation\n * @property {number} slop=2 The sensitivity of the mouse dragging\n * @property {?number} snapToGridInterval Snap the regions to a grid of the specified multiples in seconds\n * @property {?number} snapToGridOffset Shift the snap-to-grid by the specified seconds. May also be negative.\n * @property {?boolean} deferInit Set to true to manually call\n * @property {number[]} maxRegions Maximum number of regions that may be created by the user at one time.\n * `initPlugin('regions')`\n * @property {function} formatTimeCallback Allows custom formating for region tooltip.\n * @property {?number} edgeScrollWidth='5% from container edges' Optional width for edgeScroll to start\n */\n\n/**\n * @typedef {Object} RegionParams\n * @desc The parameters used to describe a region.\n * @example wavesurfer.addRegion(regionParams);\n * @property {string} id=→random The id of the region\n * @property {number} start=0 The start position of the region (in seconds).\n * @property {number} end=0 The end position of the region (in seconds).\n * @property {?boolean} loop Whether to loop the region when played back.\n * @property {boolean} drag=true Allow/disallow dragging the region.\n * @property {boolean} resize=true Allow/disallow resizing the region.\n * @property {string} [color='rgba(0, 0, 0, 0.1)'] HTML color code.\n * @property {?number} channelIdx Select channel to draw the region on (if there are multiple channel waveforms).\n * @property {?object} handleStyle A set of CSS properties used to style the left and right handle.\n * @property {?boolean} preventContextMenu=false Determines whether the context menu is prevented from being opened.\n */\n\nimport {Region} from \"./region.js\";\n\n/**\n * Regions are visual overlays on waveform that can be used to play and loop\n * portions of audio. Regions can be dragged and resized.\n *\n * Visual customization is possible via CSS (using the selectors\n * `.wavesurfer-region` and `.wavesurfer-handle`).\n *\n * @implements {PluginClass}\n * @extends {Observer}\n *\n * @example\n * // es6\n * import RegionsPlugin from 'wavesurfer.regions.js';\n *\n * // commonjs\n * var RegionsPlugin = require('wavesurfer.regions.js');\n *\n * // if you are using <script> tags\n * var RegionsPlugin = window.WaveSurfer.regions;\n *\n * // ... initialising wavesurfer with the plugin\n * var wavesurfer = WaveSurfer.create({\n *   // wavesurfer options ...\n *   plugins: [\n *     RegionsPlugin.create({\n *       // plugin options ...\n *     })\n *   ]\n * });\n */\nexport default class RegionsPlugin {\n    /**\n     * Regions plugin definition factory\n     *\n     * This function must be used to create a plugin definition which can be\n     * used by wavesurfer to correctly instantiate the plugin.\n     *\n     * @param {RegionsPluginParams} params parameters use to initialise the plugin\n     * @return {PluginDefinition} an object representing the plugin\n     */\n    static create(params) {\n        return {\n            name: 'regions',\n            deferInit: params && params.deferInit ? params.deferInit : false,\n            params: params,\n            staticProps: {\n                addRegion(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    return this.regions.add(options);\n                },\n\n                clearRegions() {\n                    this.regions && this.regions.clear();\n                },\n\n                enableDragSelection(options) {\n                    if (!this.initialisedPluginList.regions) {\n                        this.initPlugin('regions');\n                    }\n                    this.regions.enableDragSelection(options);\n                },\n\n                disableDragSelection() {\n                    this.regions.disableDragSelection();\n                }\n            },\n            instance: RegionsPlugin\n        };\n    }\n\n    constructor(params, ws) {\n        this.params = params;\n        this.wavesurfer = ws;\n        this.util = {\n            ...ws.util,\n            getRegionSnapToGridValue: value => {\n                return this.getRegionSnapToGridValue(value, params);\n            }\n        };\n        this.maxRegions = params.maxRegions;\n        this.regionsMinLength = params.regionsMinLength || null;\n\n        // turn the plugin instance into an observer\n        const observerPrototypeKeys = Object.getOwnPropertyNames(\n            this.util.Observer.prototype\n        );\n        observerPrototypeKeys.forEach(key => {\n            Region.prototype[key] = this.util.Observer.prototype[key];\n        });\n        this.wavesurfer.Region = Region;\n\n        this._onBackendCreated = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.regions) {\n                this.params.regions.forEach(region => {\n                    region.edgeScrollWidth = this.params.edgeScrollWidth || this.wrapper.clientWidth * 0.05;\n                    this.add(region);\n                });\n            }\n        };\n\n        // Id-based hash of regions\n        this.list = {};\n        this._onReady = () => {\n            this.wrapper = this.wavesurfer.drawer.wrapper;\n            if (this.params.dragSelection) {\n                this.enableDragSelection(this.params);\n            }\n            Object.keys(this.list).forEach(id => {\n                this.list[id].updateRender();\n            });\n        };\n    }\n\n    init() {\n        // Check if ws is ready\n        if (this.wavesurfer.isReady) {\n            this._onBackendCreated();\n            this._onReady();\n        } else {\n            this.wavesurfer.once('ready', this._onReady);\n            this.wavesurfer.once('backend-created', this._onBackendCreated);\n        }\n    }\n\n    destroy() {\n        this.wavesurfer.un('ready', this._onReady);\n        this.wavesurfer.un('backend-created', this._onBackendCreated);\n        this.disableDragSelection();\n        this.clear();\n    }\n\n    /**\n     * check to see if adding a new region would exceed maxRegions\n     * @return {boolean} whether we should proceed and create a region\n     * @private\n     */\n    wouldExceedMaxRegions() {\n        return (\n            this.maxRegions && Object.keys(this.list).length >= this.maxRegions\n        );\n    }\n\n    /**\n     * Add a region\n     *\n     * @param {object} params Region parameters\n     * @return {Region} The created region\n     */\n    add(params) {\n        if (this.wouldExceedMaxRegions()) return null;\n\n        if (!params.minLength && this.regionsMinLength) {\n            params = {...params, minLength: this.regionsMinLength};\n        }\n\n        const region = new this.wavesurfer.Region(params, this.util, this.wavesurfer);\n\n        this.list[region.id] = region;\n\n        region.on('remove', () => {\n            delete this.list[region.id];\n        });\n\n        return region;\n    }\n\n    /**\n     * Remove all regions\n     */\n    clear() {\n        Object.keys(this.list).forEach(id => {\n            this.list[id].remove();\n        });\n    }\n\n    enableDragSelection(params) {\n        this.disableDragSelection();\n\n        const slop = params.slop || 2;\n        const container = this.wavesurfer.drawer.container;\n        const scroll =\n            params.scroll !== false && this.wavesurfer.params.scrollParent;\n        const scrollSpeed = params.scrollSpeed || 1;\n        const scrollThreshold = params.scrollThreshold || 10;\n        let drag;\n        let duration = this.wavesurfer.getDuration();\n        let maxScroll;\n        let start;\n        let region;\n        let touchId;\n        let pxMove = 0;\n        let scrollDirection;\n        let wrapperRect;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = e => {\n            if (!region || !scrollDirection) {\n                return;\n            }\n\n            // Update scroll position\n            let scrollLeft =\n                this.wrapper.scrollLeft + scrollSpeed * scrollDirection;\n            this.wrapper.scrollLeft = scrollLeft = Math.min(\n                maxScroll,\n                Math.max(0, scrollLeft)\n            );\n\n            // Update range\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            region.update({\n                start: Math.min(end * duration, start * duration),\n                end: Math.max(end * duration, start * duration)\n            });\n\n            // Check that there is more to scroll and repeat\n            if (scrollLeft < maxScroll && scrollLeft > 0) {\n                window.requestAnimationFrame(() => {\n                    edgeScroll(e);\n                });\n            }\n        };\n\n        const eventDown = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            duration = this.wavesurfer.getDuration();\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            drag = true;\n            start = this.wavesurfer.drawer.handleEvent(e, true);\n            region = null;\n            scrollDirection = null;\n        };\n        this.wrapper.addEventListener('mousedown', eventDown);\n        this.wrapper.addEventListener('touchstart', eventDown);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchstart', eventDown);\n            this.wrapper.removeEventListener('mousedown', eventDown);\n        });\n\n        const eventUp = e => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            drag = false;\n            pxMove = 0;\n            scrollDirection = null;\n\n            if (region) {\n                this.util.preventClick();\n                region.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', region, e);\n            }\n\n            region = null;\n        };\n        this.wrapper.addEventListener('mouseup', eventUp);\n        this.wrapper.addEventListener('touchend', eventUp);\n\n        document.body.addEventListener('mouseup', eventUp);\n        document.body.addEventListener('touchend', eventUp);\n        this.on('disable-drag-selection', () => {\n            document.body.removeEventListener('mouseup', eventUp);\n            document.body.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('touchend', eventUp);\n            this.wrapper.removeEventListener('mouseup', eventUp);\n        });\n\n        const eventMove = e => {\n            if (!drag) {\n                return;\n            }\n            if (++pxMove <= slop) {\n                return;\n            }\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n\n            // auto-create a region during mouse drag, unless region-count would exceed \"maxRegions\"\n            if (!region) {\n                region = this.add(params || {});\n                if (!region) return;\n            }\n\n            const end = this.wavesurfer.drawer.handleEvent(e);\n            const startUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                start * duration\n            );\n            const endUpdate = this.wavesurfer.regions.util.getRegionSnapToGridValue(\n                end * duration\n            );\n            region.update({\n                start: Math.min(endUpdate, startUpdate),\n                end: Math.max(endUpdate, startUpdate)\n            });\n\n            // If scrolling is enabled\n            if (scroll && container.clientWidth < this.wrapper.scrollWidth) {\n                // Check threshold based on mouse\n                const x = e.clientX - wrapperRect.left;\n                if (x <= scrollThreshold) {\n                    scrollDirection = -1;\n                } else if (x >= wrapperRect.right - scrollThreshold) {\n                    scrollDirection = 1;\n                } else {\n                    scrollDirection = null;\n                }\n                scrollDirection && edgeScroll(e);\n            }\n        };\n        this.wrapper.addEventListener('mousemove', eventMove);\n        this.wrapper.addEventListener('touchmove', eventMove);\n        this.on('disable-drag-selection', () => {\n            this.wrapper.removeEventListener('touchmove', eventMove);\n            this.wrapper.removeEventListener('mousemove', eventMove);\n        });\n\n        this.wavesurfer.on('region-created', region => {\n            if (this.regionsMinLength) {\n                region.minLength = this.regionsMinLength;\n            }\n        });\n    }\n\n    disableDragSelection() {\n        this.fireEvent('disable-drag-selection');\n    }\n\n    /**\n     * Get current region\n     *\n     * The smallest region that contains the current time. If several such\n     * regions exist, take the first. Return `null` if none exist.\n     *\n     * @returns {Region} The current region\n     */\n    getCurrentRegion() {\n        const time = this.wavesurfer.getCurrentTime();\n        let min = null;\n        Object.keys(this.list).forEach(id => {\n            const cur = this.list[id];\n            if (cur.start <= time && cur.end >= time) {\n                if (!min || cur.end - cur.start < min.end - min.start) {\n                    min = cur;\n                }\n            }\n        });\n\n        return min;\n    }\n\n    /**\n     * Match the value to the grid, if required\n     *\n     * If the regions plugin params have a snapToGridInterval set, return the\n     * value matching the nearest grid interval. If no snapToGridInterval is set,\n     * the passed value will be returned without modification.\n     *\n     * @param {number} value the value to snap to the grid, if needed\n     * @param {Object} params the regions plugin params\n     * @returns {number} value\n     */\n    getRegionSnapToGridValue(value, params) {\n        if (params.snapToGridInterval) {\n            // the regions should snap to a grid\n            const offset = params.snapToGridOffset || 0;\n            return (\n                Math.round((value - offset) / params.snapToGridInterval) *\n                    params.snapToGridInterval +\n                offset\n            );\n        }\n\n        // no snap-to-grid\n        return value;\n    }\n}\n","/**\n *  @since 4.0.0\n *\n * (Single) Region plugin class\n *\n * Must be turned into an observer before instantiating. This is done in\n * `RegionsPlugin` (main plugin class).\n *\n * @extends {Observer}\n */\nexport class Region {\n    constructor(params, regionsUtils, ws) {\n        this.wavesurfer = ws;\n        this.wrapper = ws.drawer.wrapper;\n        this.util = ws.util;\n        this.style = this.util.style;\n        this.regionsUtil = regionsUtils;\n\n        this.id = params.id == null ? ws.util.getId() : params.id;\n        this.start = Number(params.start) || 0;\n        this.end =\n            params.end == null\n                ? // small marker-like region\n                this.start +\n                (4 / this.wrapper.scrollWidth) * this.wavesurfer.getDuration()\n                : Number(params.end);\n        this.resize =\n            params.resize === undefined ? true : Boolean(params.resize);\n        this.drag = params.drag === undefined ? true : Boolean(params.drag);\n        // reflect resize and drag state of region for region-updated listener\n        this.isResizing = false;\n        this.isDragging = false;\n        this.loop = Boolean(params.loop);\n        this.color = params.color || 'rgba(0, 0, 0, 0.1)';\n        // The left and right handleStyle properties can be set to 'none' for\n        // no styling or can be assigned an object containing CSS properties.\n        this.handleStyle = params.handleStyle || {\n            left: {},\n            right: {}\n        };\n        this.handleLeftEl = null;\n        this.handleRightEl = null;\n        this.data = params.data || {};\n        this.attributes = params.attributes || {};\n\n        this.maxLength = params.maxLength;\n        // It assumes the minLength parameter value, or the regionsMinLength parameter value, if the first one not provided\n        this.minLength = params.minLength;\n        this._onRedraw = () => this.updateRender();\n\n        this.scroll = params.scroll !== false && ws.params.scrollParent;\n        this.scrollSpeed = params.scrollSpeed || 1;\n        this.scrollThreshold = params.scrollThreshold || 10;\n        // Determines whether the context menu is prevented from being opened.\n        this.preventContextMenu =\n            params.preventContextMenu === undefined\n                ? false\n                : Boolean(params.preventContextMenu);\n\n        // select channel ID to set region\n        let channelIdx =\n            params.channelIdx == null ? -1 : parseInt(params.channelIdx);\n        this.regionHeight = '100%';\n        this.marginTop = '0px';\n\n        if (channelIdx !== -1) {\n            let channelCount =\n                this.wavesurfer.backend.buffer != null\n                    ? this.wavesurfer.backend.buffer.numberOfChannels\n                    : -1;\n            if (channelCount >= 0 && channelIdx < channelCount) {\n                this.regionHeight = Math.floor((1 / channelCount) * 100) + '%';\n                this.marginTop =\n                    this.wavesurfer.getHeight() * channelIdx + 'px';\n            }\n        }\n\n        this.formatTimeCallback = params.formatTimeCallback;\n        this.edgeScrollWidth = params.edgeScrollWidth;\n        this.bindInOut();\n        this.render();\n        this.wavesurfer.on('zoom', this._onRedraw);\n        this.wavesurfer.on('redraw', this._onRedraw);\n        this.wavesurfer.fireEvent('region-created', this);\n    }\n\n    /* Update region params. */\n    update(params) {\n        if (params.start != null) {\n            this.start = Number(params.start);\n        }\n        if (params.end != null) {\n            this.end = Number(params.end);\n        }\n        if (params.loop != null) {\n            this.loop = Boolean(params.loop);\n        }\n        if (params.color != null) {\n            this.color = params.color;\n        }\n        if (params.handleStyle != null) {\n            this.handleStyle = params.handleStyle;\n        }\n        if (params.data != null) {\n            this.data = params.data;\n        }\n        if (params.resize != null) {\n            this.resize = Boolean(params.resize);\n            this.updateHandlesResize(this.resize);\n        }\n        if (params.drag != null) {\n            this.drag = Boolean(params.drag);\n        }\n        if (params.maxLength != null) {\n            this.maxLength = Number(params.maxLength);\n        }\n        if (params.minLength != null) {\n            this.minLength = Number(params.minLength);\n        }\n        if (params.attributes != null) {\n            this.attributes = params.attributes;\n        }\n\n        this.updateRender();\n        this.fireEvent('update');\n        this.wavesurfer.fireEvent('region-updated', this);\n    }\n\n    /* Remove a single region. */\n    remove() {\n        if (this.element) {\n            this.wrapper.removeChild(this.element);\n            this.element = null;\n            this.fireEvent('remove');\n            this.wavesurfer.un('zoom', this._onRedraw);\n            this.wavesurfer.un('redraw', this._onRedraw);\n            this.wavesurfer.fireEvent('region-removed', this);\n        }\n    }\n\n    /**\n     * Play the audio region.\n     * @param {number} start Optional offset to start playing at\n     */\n    play(start) {\n        const s = start || this.start;\n        this.wavesurfer.play(s, this.end);\n        this.fireEvent('play');\n        this.wavesurfer.fireEvent('region-play', this);\n    }\n\n    /**\n     * Play the audio region in a loop.\n     * @param {number} start Optional offset to start playing at\n     * */\n    playLoop(start) {\n        this.loop = true;\n        this.play(start);\n    }\n\n    /**\n     * Set looping on/off.\n     * @param {boolean} loop True if should play in loop\n     */\n    setLoop(loop) {\n        this.loop = loop;\n    }\n\n    /* Render a region as a DOM element. */\n    render() {\n        const regionEl = document.createElement('region');\n\n        regionEl.className = 'wavesurfer-region';\n        regionEl.title = this.formatTime(this.start, this.end);\n        regionEl.setAttribute('data-id', this.id);\n\n        for (const attrname in this.attributes) {\n            regionEl.setAttribute(\n                'data-region-' + attrname,\n                this.attributes[attrname]\n            );\n        }\n\n        this.style(regionEl, {\n            position: 'absolute',\n            zIndex: 2,\n            height: this.regionHeight,\n            top: this.marginTop\n        });\n\n        /* Resize handles */\n        if (this.resize) {\n            this.handleLeftEl = regionEl.appendChild(\n                document.createElement('handle')\n            );\n            this.handleRightEl = regionEl.appendChild(\n                document.createElement('handle')\n            );\n\n            this.handleLeftEl.className = 'wavesurfer-handle wavesurfer-handle-start';\n            this.handleRightEl.className = 'wavesurfer-handle wavesurfer-handle-end';\n\n            // Default CSS properties for both handles.\n            const css = {\n                cursor: 'col-resize',\n                position: 'absolute',\n                top: '0px',\n                width: '2px',\n                height: '100%',\n                backgroundColor: 'rgba(0, 0, 0, 1)'\n            };\n\n            // Merge CSS properties per handle.\n            const handleLeftCss =\n                this.handleStyle.left !== 'none'\n                    ? Object.assign({ left: '0px' }, css, this.handleStyle.left)\n                    : null;\n            const handleRightCss =\n                this.handleStyle.right !== 'none'\n                    ? Object.assign(\n                        { right: '0px' },\n                        css,\n                        this.handleStyle.right\n                    )\n                    : null;\n\n            if (handleLeftCss) {\n                this.style(this.handleLeftEl, handleLeftCss);\n            }\n\n            if (handleRightCss) {\n                this.style(this.handleRightEl, handleRightCss);\n            }\n        }\n\n        this.element = this.wrapper.appendChild(regionEl);\n        this.updateRender();\n        this.bindEvents(regionEl);\n    }\n\n    formatTime(start, end) {\n        if (this.formatTimeCallback) {\n            return this.formatTimeCallback(start, end);\n        }\n        return (start == end ? [start] : [start, end])\n            .map((time) =>\n                [\n                    Math.floor((time % 3600) / 60), // minutes\n                    ('00' + Math.floor(time % 60)).slice(-2) // seconds\n                ].join(':')\n            )\n            .join('-');\n    }\n\n    getWidth() {\n        return this.wavesurfer.drawer.width / this.wavesurfer.params.pixelRatio;\n    }\n\n    /* Update element's position, width, color. */\n    updateRender() {\n        // duration varies during loading process, so don't overwrite important data\n        const dur = this.wavesurfer.getDuration();\n        const width = this.getWidth();\n\n        var startLimited = this.start;\n        var endLimited = this.end;\n        if (startLimited < 0) {\n            startLimited = 0;\n            endLimited = endLimited - startLimited;\n        }\n        if (endLimited > dur) {\n            endLimited = dur;\n            startLimited = dur - (endLimited - startLimited);\n        }\n\n        if (this.minLength != null) {\n            endLimited = Math.max(startLimited + this.minLength, endLimited);\n        }\n\n        if (this.maxLength != null) {\n            endLimited = Math.min(startLimited + this.maxLength, endLimited);\n        }\n\n        if (this.element != null) {\n            // Calculate the left and width values of the region such that\n            // no gaps appear between regions.\n            const left = Math.round((startLimited / dur) * width);\n            const regionWidth = Math.round((endLimited / dur) * width) - left;\n\n            this.style(this.element, {\n                left: left + 'px',\n                width: regionWidth + 'px',\n                backgroundColor: this.color,\n                cursor: this.drag ? 'move' : 'default'\n            });\n\n            for (const attrname in this.attributes) {\n                this.element.setAttribute(\n                    'data-region-' + attrname,\n                    this.attributes[attrname]\n                );\n            }\n\n            this.element.title = this.formatTime(this.start, this.end);\n        }\n    }\n\n    /* Bind audio events. */\n    bindInOut() {\n        this.firedIn = false;\n        this.firedOut = false;\n\n        const onProcess = (time) => {\n            let start = Math.round(this.start * 10) / 10;\n            let end = Math.round(this.end * 10) / 10;\n            time = Math.round(time * 10) / 10;\n\n            if (\n                !this.firedOut &&\n                this.firedIn &&\n                (start > time || end <= time)\n            ) {\n                this.firedOut = true;\n                this.firedIn = false;\n                this.fireEvent('out');\n                this.wavesurfer.fireEvent('region-out', this);\n            }\n            if (!this.firedIn && start <= time && end > time) {\n                this.firedIn = true;\n                this.firedOut = false;\n                this.fireEvent('in');\n                this.wavesurfer.fireEvent('region-in', this);\n            }\n        };\n\n        this.wavesurfer.backend.on('audioprocess', onProcess);\n\n        this.on('remove', () => {\n            this.wavesurfer.backend.un('audioprocess', onProcess);\n        });\n\n        /* Loop playback. */\n        this.on('out', () => {\n            if (this.loop) {\n                const realTime = this.wavesurfer.getCurrentTime();\n                if (realTime >= this.start && realTime <= this.end) {\n                    this.wavesurfer.play(this.start);\n                }\n            }\n        });\n    }\n\n    /* Bind DOM events. */\n    bindEvents() {\n        const preventContextMenu = this.preventContextMenu;\n\n        this.element.addEventListener('mouseenter', (e) => {\n            this.fireEvent('mouseenter', e);\n            this.wavesurfer.fireEvent('region-mouseenter', this, e);\n        });\n\n        this.element.addEventListener('mouseleave', (e) => {\n            this.fireEvent('mouseleave', e);\n            this.wavesurfer.fireEvent('region-mouseleave', this, e);\n        });\n\n        this.element.addEventListener('click', (e) => {\n            e.preventDefault();\n            this.fireEvent('click', e);\n            this.wavesurfer.fireEvent('region-click', this, e);\n        });\n\n        this.element.addEventListener('dblclick', (e) => {\n            e.stopPropagation();\n            e.preventDefault();\n            this.fireEvent('dblclick', e);\n            this.wavesurfer.fireEvent('region-dblclick', this, e);\n        });\n\n        this.element.addEventListener('contextmenu', (e) => {\n            if (preventContextMenu) {\n                e.preventDefault();\n            }\n            this.fireEvent('contextmenu', e);\n            this.wavesurfer.fireEvent('region-contextmenu', this, e);\n        });\n\n        /* Drag or resize on mousemove. */\n        if (this.drag || this.resize) {\n            this.bindDragEvents();\n        }\n    }\n\n    bindDragEvents() {\n        const container = this.wavesurfer.drawer.container;\n        const scrollSpeed = this.scrollSpeed;\n        const scrollThreshold = this.scrollThreshold;\n        let startTime;\n        let touchId;\n        let drag;\n        let maxScroll;\n        let resize;\n        let updated = false;\n        let scrollDirection;\n        let wrapperRect;\n        let regionLeftHalfTime;\n        let regionRightHalfTime;\n\n        // Scroll when the user is dragging within the threshold\n        const edgeScroll = (e) => {\n            const duration = this.wavesurfer.getDuration();\n            if (!scrollDirection || (!drag && !resize)) {\n                return;\n            }\n\n            const x = e.clientX;\n            let distanceBetweenCursorAndWrapperEdge = 0;\n            let regionHalfTimeWidth = 0;\n            let adjustment = 0;\n\n            // Get the currently selected time according to the mouse position\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e) * duration\n            );\n\n            if (drag) {\n                // Considering the point of contact with the region while edgescrolling\n                if (scrollDirection === -1) {\n                    regionHalfTimeWidth = regionLeftHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = x - wrapperRect.left;\n                } else {\n                    regionHalfTimeWidth = regionRightHalfTime * this.wavesurfer.params.minPxPerSec;\n                    distanceBetweenCursorAndWrapperEdge = wrapperRect.right - x;\n                }\n            } else {\n                // Considering minLength while edgescroll\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                        adjustment = scrollSpeed * scrollDirection;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            // Don't edgescroll if region has reached min or max limit\n            if (scrollDirection === -1) {\n                if (Math.round(this.wrapper.scrollLeft) === 0) {\n                    return;\n                }\n\n                if (Math.round(this.wrapper.scrollLeft - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge) <= 0) {\n                    return;\n                }\n            } else {\n                if (Math.round(this.wrapper.scrollLeft) === maxScroll) {\n                    return;\n                }\n\n                if (Math.round(this.wrapper.scrollLeft + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge) >= maxScroll) {\n                    return;\n                }\n            }\n\n            // Update scroll position\n            let scrollLeft = this.wrapper.scrollLeft - adjustment + scrollSpeed * scrollDirection;\n\n            if (scrollDirection === -1) {\n                const calculatedLeft = Math.max(0 + regionHalfTimeWidth - distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedLeft;\n            } else {\n                const calculatedRight = Math.min(maxScroll - regionHalfTimeWidth + distanceBetweenCursorAndWrapperEdge, scrollLeft);\n                this.wrapper.scrollLeft = scrollLeft = calculatedRight;\n            }\n\n            const delta = time - startTime;\n            startTime = time;\n\n            // Continue dragging or resizing\n            drag ? this.onDrag(delta) : this.onResize(delta, resize);\n\n            // Repeat\n            window.requestAnimationFrame(() => {\n                edgeScroll(e);\n            });\n        };\n\n        const onDown = (e) => {\n            const duration = this.wavesurfer.getDuration();\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            touchId = e.targetTouches ? e.targetTouches[0].identifier : null;\n\n            // stop the event propagation, if this region is resizable or draggable\n            // and the event is therefore handled here.\n            if (this.drag || this.resize) {\n                e.stopPropagation();\n            }\n\n            // Store the selected startTime we begun dragging or resizing\n            startTime = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e, true) * duration\n            );\n\n            // Store the selected point of contact when we begin dragging\n            regionLeftHalfTime = startTime - this.start;\n            regionRightHalfTime = this.end - startTime;\n\n            // Store for scroll calculations\n            maxScroll = this.wrapper.scrollWidth - this.wrapper.clientWidth;\n            wrapperRect = this.wrapper.getBoundingClientRect();\n\n            this.isResizing = false;\n            this.isDragging = false;\n            if (e.target.tagName.toLowerCase() === 'handle') {\n                this.isResizing = true;\n                resize = e.target.classList.contains('wavesurfer-handle-start')\n                    ? 'start'\n                    : 'end';\n            } else {\n                this.isDragging = true;\n                drag = true;\n                resize = false;\n            }\n        };\n        const onUp = (e) => {\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n\n            if (drag || resize) {\n                this.isDragging = false;\n                this.isResizing = false;\n                drag = false;\n                scrollDirection = null;\n                resize = false;\n            }\n\n            if (updated) {\n                updated = false;\n                this.util.preventClick();\n                this.fireEvent('update-end', e);\n                this.wavesurfer.fireEvent('region-update-end', this, e);\n            }\n        };\n        const onMove = (e) => {\n            const duration = this.wavesurfer.getDuration();\n\n            if (e.touches && e.touches.length > 1) {\n                return;\n            }\n            if (e.targetTouches && e.targetTouches[0].identifier != touchId) {\n                return;\n            }\n            if (!drag && !resize) {\n                return;\n            }\n\n            const oldTime = startTime;\n            let time = this.regionsUtil.getRegionSnapToGridValue(\n                this.wavesurfer.drawer.handleEvent(e) * duration\n            );\n\n            if (drag) {\n                // To maintain relative cursor start point while dragging\n                const maxEnd = this.wavesurfer.getDuration();\n                if (time > maxEnd - regionRightHalfTime) {\n                    time = maxEnd - regionRightHalfTime;\n                }\n\n                if (time - regionLeftHalfTime < 0) {\n                    time = regionLeftHalfTime;\n                }\n            }\n\n            if (resize) {\n                // To maintain relative cursor start point while resizing\n                // we have to handle for minLength\n                let minLength = this.minLength;\n                if (!minLength) {\n                    minLength = 0;\n                }\n\n                if (resize === 'start') {\n                    if (time > this.end - minLength) {\n                        time = this.end - minLength;\n                    }\n\n                    if (time < 0) {\n                        time = 0;\n                    }\n                } else if (resize === 'end') {\n                    if (time < this.start + minLength) {\n                        time = this.start + minLength;\n                    }\n\n                    if (time > duration) {\n                        time = duration;\n                    }\n                }\n            }\n\n            let delta = time - startTime;\n            startTime = time;\n\n            // Drag\n            if (this.drag && drag) {\n                updated = updated || !!delta;\n                this.onDrag(delta);\n            }\n\n            // Resize\n            if (this.resize && resize) {\n                updated = updated || !!delta;\n                this.onResize(delta, resize);\n            }\n\n            if (\n                this.scroll &&\n                container.clientWidth < this.wrapper.scrollWidth\n            ) {\n                // Triggering edgescroll from within edgeScrollWidth\n                if (drag) {\n                    let x = e.clientX;\n\n                    // Check direction\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\n                        scrollDirection = -1;\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                        scrollDirection = 1;\n                    } else {\n                        scrollDirection = null;\n                    }\n                } else {\n                    let x = e.clientX;\n\n                    // Check direction\n                    if (x < wrapperRect.left + this.edgeScrollWidth) {\n                        scrollDirection = -1;\n                    } else if (x > wrapperRect.right - this.edgeScrollWidth) {\n                        scrollDirection = 1;\n                    } else {\n                        scrollDirection = null;\n                    }\n                }\n\n                if (scrollDirection) {\n                    edgeScroll(e);\n                }\n            }\n        };\n\n        this.element.addEventListener('mousedown', onDown);\n        this.element.addEventListener('touchstart', onDown);\n\n        document.body.addEventListener('mousemove', onMove);\n        document.body.addEventListener('touchmove', onMove);\n\n        document.body.addEventListener('mouseup', onUp);\n        document.body.addEventListener('touchend', onUp);\n\n        this.on('remove', () => {\n            document.body.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n            document.body.removeEventListener('mousemove', onMove);\n            document.body.removeEventListener('touchmove', onMove);\n        });\n\n        this.wavesurfer.on('destroy', () => {\n            document.body.removeEventListener('mouseup', onUp);\n            document.body.removeEventListener('touchend', onUp);\n        });\n    }\n\n    onDrag(delta) {\n        const maxEnd = this.wavesurfer.getDuration();\n        if (this.end + delta > maxEnd) {\n            delta = maxEnd - this.end;\n        }\n\n        if (this.start + delta < 0) {\n            delta = this.start * -1;\n        }\n\n        this.update({\n            start: this.start + delta,\n            end: this.end + delta\n        });\n    }\n\n    /**\n     * @example\n     * onResize(-5, 'start') // Moves the start point 5 seconds back\n     * onResize(0.5, 'end') // Moves the end point 0.5 seconds forward\n     *\n     * @param {number} delta How much to add or subtract, given in seconds\n     * @param {string} direction 'start 'or 'end'\n     */\n    onResize(delta, direction) {\n        const duration = this.wavesurfer.getDuration();\n        if (direction === 'start') {\n            // Check if changing the start by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta > 0 && this.end - (this.start + delta) < this.minLength) {\n                delta = this.end - this.minLength - this.start;\n            }\n\n            if (delta < 0 && (this.start + delta) < 0) {\n                delta = this.start * -1;\n            }\n\n            this.update({\n                start: Math.min(this.start + delta, this.end),\n                end: Math.max(this.start + delta, this.end)\n            });\n        } else {\n            // Check if changing the end by the given delta would result in the region being smaller than minLength\n            // Ignore cases where we are making the region wider rather than shrinking it\n            if (delta < 0 && this.end + delta - this.start < this.minLength) {\n                delta = this.start + this.minLength - this.end;\n            }\n\n            if (delta > 0 && (this.end + delta) > duration) {\n                delta = duration - this.end;\n            }\n\n            this.update({\n                start: Math.min(this.end + delta, this.start),\n                end: Math.max(this.end + delta, this.start)\n            });\n        }\n    }\n\n    updateHandlesResize(resize) {\n        const cursorStyle = resize ? 'col-resize' : 'auto';\n\n        this.handleLeftEl && this.style(this.handleLeftEl, { cursor: cursorStyle });\n        this.handleRightEl && this.style(this.handleRightEl, { cursor: cursorStyle });\n    }\n}\n"],"sourceRoot":""}